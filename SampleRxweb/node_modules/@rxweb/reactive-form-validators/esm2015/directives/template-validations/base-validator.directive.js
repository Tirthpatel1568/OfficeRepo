import { Input, Directive } from "@angular/core";
import { INPUT, SELECT, CHECKBOX, TEXTAREA, RADIO, FILE, CHANGE } from "../../const";
import { ControlExpressionProcess } from './control-expression-process';
export class BaseValidator extends ControlExpressionProcess {
    constructor() {
        super(...arguments);
        this.validators = [];
    }
    validation(control) {
        let result = null;
        for (let validator of this.validators) {
            result = validator(control);
            if (result)
                break;
        }
        if (!result && this.maskProvider)
            result = this.maskProvider.validate();
        return result;
    }
    setEventName() {
        var eventName = '';
        switch (this.element.tagName) {
            case INPUT:
            case TEXTAREA:
                eventName = (this.element.type == CHECKBOX || this.element.type == RADIO || this.element.type == FILE) ? CHANGE : INPUT;
                break;
            case SELECT:
                eventName = CHANGE;
                break;
        }
        this.eventName = eventName.toLowerCase();
    }
}
BaseValidator.decorators = [
    { type: Directive }
];
BaseValidator.propDecorators = {
    formControl: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS12YWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL2RpcmVjdGl2ZXMvdGVtcGxhdGUtdmFsaWRhdGlvbnMvYmFzZS12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRWhELE9BQU8sRUFDSCxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQ2pDLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUN0QixNQUFNLGFBQWEsQ0FBQztBQUVyQixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUl2RSxNQUFNLE9BQU8sYUFBYyxTQUFRLHdCQUF3QjtJQUQzRDs7UUFJYyxlQUFVLEdBQW1CLEVBQUUsQ0FBQztJQWtDOUMsQ0FBQztJQTdCRyxVQUFVLENBQUMsT0FBd0I7UUFDL0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLEtBQUssSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzVCLElBQUksTUFBTTtnQkFDTixNQUFNO1NBQ2I7UUFDRCxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZO1lBQzdCLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3pDLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFHUyxZQUFZO1FBQ2xCLElBQUksU0FBUyxHQUFXLEVBQUUsQ0FBQztRQUMzQixRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQzFCLEtBQUssS0FBSyxDQUFDO1lBQ1gsS0FBSyxRQUFRO2dCQUNULFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUN4SCxNQUFNO1lBQ1YsS0FBSyxNQUFNO2dCQUNQLFNBQVMsR0FBRyxNQUFNLENBQUM7Z0JBQ25CLE1BQU07U0FDYjtRQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdDLENBQUM7OztZQWxDSixTQUFTOzs7MEJBRUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiXHJcbmltcG9ydCB7ICBWYWxpZGF0b3JGbiwgQWJzdHJhY3RDb250cm9sLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHtcclxuICAgIElOUFVULCBTRUxFQ1QsIENIRUNLQk9YLCBURVhUQVJFQSwgXHJcbiAgICBSQURJTywgRklMRSwgQ0hBTkdFXHJcbn0gZnJvbSBcIi4uLy4uL2NvbnN0XCI7XHJcblxyXG5pbXBvcnQgeyBDb250cm9sRXhwcmVzc2lvblByb2Nlc3MgfSBmcm9tICcuL2NvbnRyb2wtZXhwcmVzc2lvbi1wcm9jZXNzJ1xyXG5pbXBvcnQgeyBNYXNrUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9kb21haW4vZWxlbWVudC1wcm9jZXNzb3IvbWFzay5wcm92aWRlcic7XHJcblxyXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBCYXNlVmFsaWRhdG9yIGV4dGVuZHMgQ29udHJvbEV4cHJlc3Npb25Qcm9jZXNzIHtcclxuICAgIEBJbnB1dCgpIGZvcm1Db250cm9sOiBGb3JtQ29udHJvbCB8IEFic3RyYWN0Q29udHJvbDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgdmFsaWRhdG9yczogVmFsaWRhdG9yRm5bXSAgPSBbXTtcclxuICAgIHByb3RlY3RlZCBlbGVtZW50OiBhbnk7XHJcbiAgICBwcm90ZWN0ZWQgZXZlbnROYW1lOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgbWFza1Byb3ZpZGVyOiBNYXNrUHJvdmlkZXI7XHJcblxyXG4gICAgdmFsaWRhdGlvbihjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCB2YWxpZGF0b3Igb2YgdGhpcy52YWxpZGF0b3JzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbGlkYXRvcihjb250cm9sKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdClcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlc3VsdCAmJiB0aGlzLm1hc2tQcm92aWRlcilcclxuICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1hc2tQcm92aWRlci52YWxpZGF0ZSgpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCBzZXRFdmVudE5hbWUoKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50TmFtZTogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmVsZW1lbnQudGFnTmFtZSkge1xyXG4gICAgICAgICAgICBjYXNlIElOUFVUOlxyXG4gICAgICAgICAgICBjYXNlIFRFWFRBUkVBOlxyXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lID0gKHRoaXMuZWxlbWVudC50eXBlID09IENIRUNLQk9YIHx8IHRoaXMuZWxlbWVudC50eXBlID09IFJBRElPIHx8IHRoaXMuZWxlbWVudC50eXBlID09IEZJTEUpID8gQ0hBTkdFIDogSU5QVVQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTRUxFQ1Q6XHJcbiAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBDSEFOR0U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ldmVudE5hbWUgPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxufVxyXG4iXX0=