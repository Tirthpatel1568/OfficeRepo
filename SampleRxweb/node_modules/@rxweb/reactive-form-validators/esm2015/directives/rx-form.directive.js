import { Directive, Input } from "@angular/core";
import { FormGroup, FormArray } from "@angular/forms";
import { AnnotationTypes } from "../core/validator.static";
import { defaultContainer } from "../core/defaultContainer";
import { BaseDirective } from "./base-directive";
import { Linq } from "../util/linq";
import { conditionalChangeValidator } from '../reactive-form-validators/conditional-change.validator';
import { CONDITIONAL_VALIDATOR, MODEL } from '../const/app.const';
export class RxwebFormDirective extends BaseDirective {
    constructor() {
        super(...arguments);
        this.clearTimeoutNumber = 0;
        this.validationRule = {};
    }
    ngAfterContentInit() {
        if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent == null) {
            this.expressionProcessor(this.formGroup.controls);
            this.setConditionalValidator(this.formGroup.controls);
        }
        else if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent instanceof FormArray) {
            this.expressionProcessor(this.formGroup.controls);
            this.setConditionalValidator(this.formGroup.controls);
        }
        else if (this.ngForm) {
            this.configureModelValidations();
        }
    }
    configureModelValidations() {
        this.clearTimeoutNumber = setTimeout(() => {
            clearTimeout(this.clearTimeoutNumber);
            this.applyValidations(this.ngForm.form.controls);
            this.expressionProcessor(this.ngForm.form.controls);
            this.setConditionalValidator(this.ngForm.form.controls);
            this.updateValueAndValidity(this.ngForm.form.controls);
        }, 500);
    }
    updateValueAndValidity(controls) {
        Object.keys(controls).forEach(key => {
            if (controls[key] instanceof FormGroup)
                this.updateValueAndValidity(controls[key].controls);
            else if (controls[key] instanceof FormArray)
                this.updateValueAndValidity(controls[key].controls);
            else
                controls[key].updateValueAndValidity();
        });
    }
    expressionProcessor(controls, rootFieldName = "") {
        Object.keys(controls).forEach(fieldName => {
            let formControl = controls[fieldName];
            if (formControl.validatorConfig) {
                Object.keys(AnnotationTypes).forEach(validatorName => {
                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].disableExpression) {
                        formControl["disableExpression"] = formControl.validatorConfig[validatorName].disableExpression;
                        let columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].disableExpression);
                        defaultContainer.addChangeValidation(this.validationRule, rootFieldName + fieldName, columns);
                    }
                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].conditionalExpression) {
                        let columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].conditionalExpression);
                        defaultContainer.addChangeValidation(this.validationRule, rootFieldName + fieldName, columns);
                    }
                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].dynamicConfig) {
                        let columns = Linq.dynamicConfigParser(formControl.validatorConfig[validatorName].dynamicConfig, fieldName);
                        defaultContainer.addChangeValidation(this.validationRule, rootFieldName + fieldName, columns);
                    }
                    if (formControl.validatorConfig[validatorName] && (validatorName == AnnotationTypes.and || validatorName == AnnotationTypes.or || validatorName == AnnotationTypes.not)) {
                        Object.keys(formControl.validatorConfig[validatorName].validation).forEach(t => {
                            if (typeof formControl.validatorConfig[validatorName].validation[t] !== "boolean")
                                defaultContainer.setLogicalConditional(this.validationRule, t, formControl.validatorConfig[validatorName].validation[t].fieldName, fieldName);
                        });
                    }
                    else if (formControl.validatorConfig[validatorName] && ((validatorName == AnnotationTypes.compare || validatorName == AnnotationTypes.greaterThan || validatorName == AnnotationTypes.greaterThanEqualTo || validatorName == AnnotationTypes.lessThan || validatorName == AnnotationTypes.lessThanEqualTo || validatorName == AnnotationTypes.different || validatorName == AnnotationTypes.factor || validatorName == AnnotationTypes.minTime || validatorName == AnnotationTypes.maxTime) || (validatorName == AnnotationTypes.creditCard && formControl.validatorConfig[validatorName].fieldName) || ((validatorName == AnnotationTypes.minDate || validatorName == AnnotationTypes.maxDate) && formControl.validatorConfig[validatorName].fieldName))) {
                        defaultContainer.setConditionalValueProp(this.validationRule, formControl.validatorConfig[validatorName].fieldName, fieldName);
                    }
                });
            }
            else if (formControl instanceof FormGroup) {
                this.expressionProcessor(formControl.controls, `${fieldName}.`);
            }
            else if (formControl instanceof FormArray) {
                if (formControl.controls)
                    formControl.controls.forEach((t, i) => {
                        if (t.controls)
                            this.expressionProcessor(t.controls, `${fieldName}[]`);
                    });
            }
        });
    }
    setConditionalValidator(controls) {
        Object.keys(controls).forEach(fieldName => {
            if (this.validationRule.conditionalValidationProps && this.validationRule.conditionalValidationProps[fieldName]) {
                controls[fieldName][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(this.validationRule.conditionalValidationProps[fieldName]);
            }
            else if (controls[fieldName] instanceof FormGroup && this.validationRule.conditionalObjectProps) {
                var fields = this.validationRule.conditionalObjectProps.filter(t => t.objectPropName == fieldName);
                let nestedFormGroup = controls[fieldName];
                let propWiseConditionalControls = {};
                fields.forEach(x => {
                    if (!propWiseConditionalControls[x.propName])
                        propWiseConditionalControls[x.propName] = [];
                    propWiseConditionalControls[x.propName].push(x.referencePropName);
                });
                Object.keys(propWiseConditionalControls).forEach(key => {
                    nestedFormGroup.controls[key][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(propWiseConditionalControls[key]);
                });
            }
            else if (controls[fieldName] instanceof FormArray) {
                //fix https://github.com/rxweb/rxweb/issues/274
                controls[fieldName].controls.forEach((t, i) => {
                    if (t.controls == undefined)
                        this.setConditionalValidator({ [i]: t });
                    else
                        this.setConditionalValidator(t.controls);
                });
            }
        });
    }
    ngOnDestroy() {
    }
}
RxwebFormDirective.decorators = [
    { type: Directive, args: [{
                selector: '[formGroup],[rxwebForm]',
            },] }
];
RxwebFormDirective.propDecorators = {
    formGroup: [{ type: Input }],
    ngForm: [{ type: Input, args: ['rxwebForm',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtZm9ybS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvZGlyZWN0aXZlcy9yeC1mb3JtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBK0IsTUFBTSxlQUFlLENBQUE7QUFDN0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ2hELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDcEMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDdEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBS2pFLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxhQUFhO0lBSHJEOztRQUlZLHVCQUFrQixHQUFRLENBQUMsQ0FBQztRQUM1QixtQkFBYyxHQUFRLEVBQUUsQ0FBQztJQThHckMsQ0FBQztJQTFHRyxrQkFBa0I7UUFDZCxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRTtZQUMzRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENB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O3FCQUNMLEtBQUssU0FBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIlxyXG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1BcnJheSB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBBbm5vdGF0aW9uVHlwZXMgfSBmcm9tIFwiLi4vY29yZS92YWxpZGF0b3Iuc3RhdGljXCI7XHJcbmltcG9ydCB7IGRlZmF1bHRDb250YWluZXIgfSBmcm9tIFwiLi4vY29yZS9kZWZhdWx0Q29udGFpbmVyXCI7XHJcbmltcG9ydCB7IEJhc2VEaXJlY3RpdmUgfSBmcm9tIFwiLi9iYXNlLWRpcmVjdGl2ZVwiXHJcbmltcG9ydCB7IExpbnEgfSBmcm9tIFwiLi4vdXRpbC9saW5xXCI7XHJcbmltcG9ydCB7IGNvbmRpdGlvbmFsQ2hhbmdlVmFsaWRhdG9yIH0gZnJvbSAnLi4vcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL2NvbmRpdGlvbmFsLWNoYW5nZS52YWxpZGF0b3InO1xyXG5pbXBvcnQgeyBDT05ESVRJT05BTF9WQUxJREFUT1IsIE1PREVMIH0gZnJvbSAnLi4vY29uc3QvYXBwLmNvbnN0J1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tmb3JtR3JvdXBdLFtyeHdlYkZvcm1dJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFJ4d2ViRm9ybURpcmVjdGl2ZSBleHRlbmRzIEJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSBjbGVhclRpbWVvdXROdW1iZXI6IGFueSA9IDA7XHJcbiAgICBwcml2YXRlIHZhbGlkYXRpb25SdWxlOiBhbnkgPSB7fTtcclxuICAgIEBJbnB1dCgpIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xyXG4gICAgQElucHV0KCdyeHdlYkZvcm0nKSBuZ0Zvcm07XHJcblxyXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmZvcm1Hcm91cCAmJiAhdGhpcy5mb3JtR3JvdXBbTU9ERUxdICYmIHRoaXMuZm9ybUdyb3VwLnBhcmVudCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvblByb2Nlc3Nvcih0aGlzLmZvcm1Hcm91cC5jb250cm9scyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q29uZGl0aW9uYWxWYWxpZGF0b3IodGhpcy5mb3JtR3JvdXAuY29udHJvbHMpXHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZvcm1Hcm91cCAmJiAhdGhpcy5mb3JtR3JvdXBbTU9ERUxdICYmIHRoaXMuZm9ybUdyb3VwLnBhcmVudCBpbnN0YW5jZW9mIEZvcm1BcnJheSkge1xyXG4gICAgICAgICAgICB0aGlzLmV4cHJlc3Npb25Qcm9jZXNzb3IodGhpcy5mb3JtR3JvdXAuY29udHJvbHMpO1xyXG4gICAgICAgICAgICB0aGlzLnNldENvbmRpdGlvbmFsVmFsaWRhdG9yKHRoaXMuZm9ybUdyb3VwLmNvbnRyb2xzKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLm5nRm9ybSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyZU1vZGVsVmFsaWRhdGlvbnMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb25maWd1cmVNb2RlbFZhbGlkYXRpb25zKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0TnVtYmVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNsZWFyVGltZW91dE51bWJlcik7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlWYWxpZGF0aW9ucyh0aGlzLm5nRm9ybS5mb3JtLmNvbnRyb2xzKTtcclxuICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uUHJvY2Vzc29yKHRoaXMubmdGb3JtLmZvcm0uY29udHJvbHMpO1xyXG4gICAgICAgICAgICB0aGlzLnNldENvbmRpdGlvbmFsVmFsaWRhdG9yKHRoaXMubmdGb3JtLmZvcm0uY29udHJvbHMpXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSh0aGlzLm5nRm9ybS5mb3JtLmNvbnRyb2xzKTtcclxuICAgICAgICB9LCA1MDApXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KGNvbnRyb2xzOiBhbnkpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhjb250cm9scykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY29udHJvbHNba2V5XSBpbnN0YW5jZW9mIEZvcm1Hcm91cClcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eShjb250cm9sc1trZXldLmNvbnRyb2xzKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoY29udHJvbHNba2V5XSBpbnN0YW5jZW9mIEZvcm1BcnJheSlcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eShjb250cm9sc1trZXldLmNvbnRyb2xzKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgY29udHJvbHNba2V5XS51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGV4cHJlc3Npb25Qcm9jZXNzb3IoY29udHJvbHM6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIHJvb3RGaWVsZE5hbWU6IHN0cmluZyA9IFwiXCIpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhjb250cm9scykuZm9yRWFjaChmaWVsZE5hbWUgPT4ge1xyXG4gICAgICAgICAgICBsZXQgZm9ybUNvbnRyb2w6IGFueSA9IGNvbnRyb2xzW2ZpZWxkTmFtZV07XHJcbiAgICAgICAgICAgIGlmIChmb3JtQ29udHJvbC52YWxpZGF0b3JDb25maWcpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKEFubm90YXRpb25UeXBlcykuZm9yRWFjaCh2YWxpZGF0b3JOYW1lID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUNvbnRyb2wudmFsaWRhdG9yQ29uZmlnW3ZhbGlkYXRvck5hbWVdICYmIGZvcm1Db250cm9sLnZhbGlkYXRvckNvbmZpZ1t2YWxpZGF0b3JOYW1lXS5kaXNhYmxlRXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ29udHJvbFtcImRpc2FibGVFeHByZXNzaW9uXCJdID0gZm9ybUNvbnRyb2wudmFsaWRhdG9yQ29uZmlnW3ZhbGlkYXRvck5hbWVdLmRpc2FibGVFeHByZXNzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29sdW1ucyA9IExpbnEuZXhwcmVzc2lvbkNvbHVtbnMoZm9ybUNvbnRyb2wudmFsaWRhdG9yQ29uZmlnW3ZhbGlkYXRvck5hbWVdLmRpc2FibGVFeHByZXNzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENvbnRhaW5lci5hZGRDaGFuZ2VWYWxpZGF0aW9uKHRoaXMudmFsaWRhdGlvblJ1bGUsIHJvb3RGaWVsZE5hbWUgKyBmaWVsZE5hbWUsIGNvbHVtbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUNvbnRyb2wudmFsaWRhdG9yQ29uZmlnW3ZhbGlkYXRvck5hbWVdICYmIGZvcm1Db250cm9sLnZhbGlkYXRvckNvbmZpZ1t2YWxpZGF0b3JOYW1lXS5jb25kaXRpb25hbEV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbHVtbnMgPSBMaW5xLmV4cHJlc3Npb25Db2x1bW5zKGZvcm1Db250cm9sLnZhbGlkYXRvckNvbmZpZ1t2YWxpZGF0b3JOYW1lXS5jb25kaXRpb25hbEV4cHJlc3Npb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q29udGFpbmVyLmFkZENoYW5nZVZhbGlkYXRpb24odGhpcy52YWxpZGF0aW9uUnVsZSwgcm9vdEZpZWxkTmFtZSArIGZpZWxkTmFtZSwgY29sdW1ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtQ29udHJvbC52YWxpZGF0b3JDb25maWdbdmFsaWRhdG9yTmFtZV0gJiYgZm9ybUNvbnRyb2wudmFsaWRhdG9yQ29uZmlnW3ZhbGlkYXRvck5hbWVdLmR5bmFtaWNDb25maWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbHVtbnMgPSBMaW5xLmR5bmFtaWNDb25maWdQYXJzZXIoZm9ybUNvbnRyb2wudmFsaWRhdG9yQ29uZmlnW3ZhbGlkYXRvck5hbWVdLmR5bmFtaWNDb25maWcsIGZpZWxkTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb250YWluZXIuYWRkQ2hhbmdlVmFsaWRhdGlvbih0aGlzLnZhbGlkYXRpb25SdWxlLCByb290RmllbGROYW1lICsgZmllbGROYW1lLCBjb2x1bW5zKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1Db250cm9sLnZhbGlkYXRvckNvbmZpZ1t2YWxpZGF0b3JOYW1lXSAmJiAodmFsaWRhdG9yTmFtZSA9PSBBbm5vdGF0aW9uVHlwZXMuYW5kIHx8IHZhbGlkYXRvck5hbWUgPT0gQW5ub3RhdGlvblR5cGVzLm9yIHx8IHZhbGlkYXRvck5hbWUgPT0gQW5ub3RhdGlvblR5cGVzLm5vdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoZm9ybUNvbnRyb2wudmFsaWRhdG9yQ29uZmlnW3ZhbGlkYXRvck5hbWVdLnZhbGlkYXRpb24pLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1Db250cm9sLnZhbGlkYXRvckNvbmZpZ1t2YWxpZGF0b3JOYW1lXS52YWxpZGF0aW9uW3RdICE9PSBcImJvb2xlYW5cIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q29udGFpbmVyLnNldExvZ2ljYWxDb25kaXRpb25hbCh0aGlzLnZhbGlkYXRpb25SdWxlLCB0LCBmb3JtQ29udHJvbC52YWxpZGF0b3JDb25maWdbdmFsaWRhdG9yTmFtZV0udmFsaWRhdGlvblt0XS5maWVsZE5hbWUsIGZpZWxkTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1Db250cm9sLnZhbGlkYXRvckNvbmZpZ1t2YWxpZGF0b3JOYW1lXSAmJiAoKHZhbGlkYXRvck5hbWUgPT0gQW5ub3RhdGlvblR5cGVzLmNvbXBhcmUgfHwgdmFsaWRhdG9yTmFtZSA9PSBBbm5vdGF0aW9uVHlwZXMuZ3JlYXRlclRoYW4gfHwgdmFsaWRhdG9yTmFtZSA9PSBBbm5vdGF0aW9uVHlwZXMuZ3JlYXRlclRoYW5FcXVhbFRvIHx8IHZhbGlkYXRvck5hbWUgPT0gQW5ub3RhdGlvblR5cGVzLmxlc3NUaGFuIHx8IHZhbGlkYXRvck5hbWUgPT0gQW5ub3RhdGlvblR5cGVzLmxlc3NUaGFuRXF1YWxUbyB8fCB2YWxpZGF0b3JOYW1lID09IEFubm90YXRpb25UeXBlcy5kaWZmZXJlbnQgfHwgdmFsaWRhdG9yTmFtZSA9PSBBbm5vdGF0aW9uVHlwZXMuZmFjdG9yIHx8IHZhbGlkYXRvck5hbWUgPT0gQW5ub3RhdGlvblR5cGVzLm1pblRpbWUgfHwgdmFsaWRhdG9yTmFtZSA9PSBBbm5vdGF0aW9uVHlwZXMubWF4VGltZSkgfHwgKHZhbGlkYXRvck5hbWUgPT0gQW5ub3RhdGlvblR5cGVzLmNyZWRpdENhcmQgJiYgZm9ybUNvbnRyb2wudmFsaWRhdG9yQ29uZmlnW3ZhbGlkYXRvck5hbWVdLmZpZWxkTmFtZSkgfHwgKCh2YWxpZGF0b3JOYW1lID09IEFubm90YXRpb25UeXBlcy5taW5EYXRlIHx8IHZhbGlkYXRvck5hbWUgPT0gQW5ub3RhdGlvblR5cGVzLm1heERhdGUpICYmIGZvcm1Db250cm9sLnZhbGlkYXRvckNvbmZpZ1t2YWxpZGF0b3JOYW1lXS5maWVsZE5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q29udGFpbmVyLnNldENvbmRpdGlvbmFsVmFsdWVQcm9wKHRoaXMudmFsaWRhdGlvblJ1bGUsIGZvcm1Db250cm9sLnZhbGlkYXRvckNvbmZpZ1t2YWxpZGF0b3JOYW1lXS5maWVsZE5hbWUsIGZpZWxkTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1Db250cm9sIGluc3RhbmNlb2YgRm9ybUdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4cHJlc3Npb25Qcm9jZXNzb3IoZm9ybUNvbnRyb2wuY29udHJvbHMsIGAke2ZpZWxkTmFtZX0uYCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybUNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JtQ29udHJvbC5jb250cm9scylcclxuICAgICAgICAgICAgICAgICAgICBmb3JtQ29udHJvbC5jb250cm9scy5mb3JFYWNoKCh0OiBhbnksIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuY29udHJvbHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cHJlc3Npb25Qcm9jZXNzb3IodC5jb250cm9scywgYCR7ZmllbGROYW1lfVtdYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Q29uZGl0aW9uYWxWYWxpZGF0b3IoY29udHJvbHMpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhjb250cm9scykuZm9yRWFjaChmaWVsZE5hbWUgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52YWxpZGF0aW9uUnVsZS5jb25kaXRpb25hbFZhbGlkYXRpb25Qcm9wcyAmJiB0aGlzLnZhbGlkYXRpb25SdWxlLmNvbmRpdGlvbmFsVmFsaWRhdGlvblByb3BzW2ZpZWxkTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xzW2ZpZWxkTmFtZV1bQ09ORElUSU9OQUxfVkFMSURBVE9SXSA9IGNvbmRpdGlvbmFsQ2hhbmdlVmFsaWRhdG9yKHRoaXMudmFsaWRhdGlvblJ1bGUuY29uZGl0aW9uYWxWYWxpZGF0aW9uUHJvcHNbZmllbGROYW1lXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udHJvbHNbZmllbGROYW1lXSBpbnN0YW5jZW9mIEZvcm1Hcm91cCAmJiB0aGlzLnZhbGlkYXRpb25SdWxlLmNvbmRpdGlvbmFsT2JqZWN0UHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaWVsZHMgPSB0aGlzLnZhbGlkYXRpb25SdWxlLmNvbmRpdGlvbmFsT2JqZWN0UHJvcHMuZmlsdGVyKHQgPT4gdC5vYmplY3RQcm9wTmFtZSA9PSBmaWVsZE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG5lc3RlZEZvcm1Hcm91cCA9IGNvbnRyb2xzW2ZpZWxkTmFtZV0gYXMgRm9ybUdyb3VwO1xyXG4gICAgICAgICAgICAgICAgbGV0IHByb3BXaXNlQ29uZGl0aW9uYWxDb250cm9sczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmdbXSB9ID0ge307XHJcbiAgICAgICAgICAgICAgICBmaWVsZHMuZm9yRWFjaCh4ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXByb3BXaXNlQ29uZGl0aW9uYWxDb250cm9sc1t4LnByb3BOYW1lXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcFdpc2VDb25kaXRpb25hbENvbnRyb2xzW3gucHJvcE5hbWVdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcFdpc2VDb25kaXRpb25hbENvbnRyb2xzW3gucHJvcE5hbWVdLnB1c2goeC5yZWZlcmVuY2VQcm9wTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BXaXNlQ29uZGl0aW9uYWxDb250cm9scykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5lc3RlZEZvcm1Hcm91cC5jb250cm9sc1trZXldW0NPTkRJVElPTkFMX1ZBTElEQVRPUl0gPSBjb25kaXRpb25hbENoYW5nZVZhbGlkYXRvcihwcm9wV2lzZUNvbmRpdGlvbmFsQ29udHJvbHNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250cm9sc1tmaWVsZE5hbWVdIGluc3RhbmNlb2YgRm9ybUFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAvL2ZpeCBodHRwczovL2dpdGh1Yi5jb20vcnh3ZWIvcnh3ZWIvaXNzdWVzLzI3NFxyXG4gICAgICAgICAgICAgICAgY29udHJvbHNbZmllbGROYW1lXS5jb250cm9scy5mb3JFYWNoKCh0LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuY29udHJvbHMgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENvbmRpdGlvbmFsVmFsaWRhdG9yKHsgW2ldOiB0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb25kaXRpb25hbFZhbGlkYXRvcih0LmNvbnRyb2xzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcblxyXG4gICAgfVxyXG59XHJcbiJdfQ==